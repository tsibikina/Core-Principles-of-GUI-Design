# Form implementation generated from reading ui file 'GUI_2.ui'
#
# Created by: PyQt6 UI code generator 6.9.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt6 import QtCore, QtGui, QtWidgets


class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(498, 367)
        self.centralwidget = QtWidgets.QWidget(parent=MainWindow)
        self.centralwidget.setObjectName("centralwidget")

        # Поля ввода
        self.rub_input = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.rub_input.setGeometry(QtCore.QRect(60, 40, 151, 41))
        self.rub_input.setObjectName("rub_input")

        self.usd_input = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.usd_input.setGeometry(QtCore.QRect(60, 120, 151, 41))
        self.usd_input.setObjectName("usd_input")

        self.eur_input = QtWidgets.QLineEdit(parent=self.centralwidget)
        self.eur_input.setGeometry(QtCore.QRect(60, 200, 151, 41))
        self.eur_input.setObjectName("eur_input")

        # Метки
        self.rub_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.rub_label.setGeometry(QtCore.QRect(220, 50, 51, 21))
        self.rub_label.setObjectName("rub_label")

        self.usd_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.usd_label.setGeometry(QtCore.QRect(220, 130, 51, 21))
        self.usd_label.setObjectName("usd_label")

        self.eur_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.eur_label.setGeometry(QtCore.QRect(220, 210, 51, 21))
        self.eur_label.setObjectName("eur_label")

        # Кнопка сброса
        self.clear_button = QtWidgets.QPushButton(parent=self.centralwidget)
        self.clear_button.setGeometry(QtCore.QRect(280, 100, 161, 71))
        self.clear_button.setObjectName("clear_button")

        # Информационная метка с курсами
        self.rates_label = QtWidgets.QLabel(parent=self.centralwidget)
        self.rates_label.setGeometry(QtCore.QRect(60, 260, 381, 41))
        self.rates_label.setObjectName("rates_label")

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(parent=MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 498, 26))
        self.menubar.setObjectName("menubar")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(parent=MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)

        # Инициализация курсов валют ДО вызова retranslateUi
        self.exchange_rates = {
            'USD_RUB': 90.0,  # 1 USD = 90 RUB
            'EUR_RUB': 98.0,  # 1 EUR = 98 RUB
            'USD_EUR': 0.92  # 1 USD = 0.92 EUR
        }

        # Флаг для предотвращения рекурсивных обновлений
        self.updating = False

        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)

        # Подключаем сигналы
        self.connect_signals()

    def connect_signals(self):
        """Подключение сигналов для автоматической конвертации"""
        self.rub_input.textChanged.connect(self.on_rub_changed)
        self.usd_input.textChanged.connect(self.on_usd_changed)
        self.eur_input.textChanged.connect(self.on_eur_changed)
        self.clear_button.clicked.connect(self.clear_all)

    def clear_all(self):
        """Очистка всех полей ввода"""
        self.updating = True
        self.rub_input.clear()
        self.usd_input.clear()
        self.eur_input.clear()
        self.updating = False

    def on_rub_changed(self, text):
        """Обработка изменения поля рублей"""
        if self.updating or not text:
            return

        try:
            rub_value = float(text.replace(',', '.'))
            self.updating = True

            # Конвертация в USD
            usd_value = rub_value / self.exchange_rates['USD_RUB']
            self.usd_input.setText(f"{usd_value:.2f}")

            # Конвертация в EUR
            eur_value = rub_value / self.exchange_rates['EUR_RUB']
            self.eur_input.setText(f"{eur_value:.2f}")

            self.updating = False
        except ValueError:
            # Если введено не число, очищаем другие поля
            if not self.updating:
                self.updating = True
                self.usd_input.clear()
                self.eur_input.clear()
                self.updating = False

    def on_usd_changed(self, text):
        """Обработка изменения поля долларов"""
        if self.updating or not text:
            return

        try:
            usd_value = float(text.replace(',', '.'))
            self.updating = True

            # Конвертация в RUB
            rub_value = usd_value * self.exchange_rates['USD_RUB']
            self.rub_input.setText(f"{rub_value:.2f}")

            # Конвертация в EUR
            eur_value = usd_value * self.exchange_rates['USD_EUR']
            self.eur_input.setText(f"{eur_value:.2f}")

            self.updating = False
        except ValueError:
            # Если введено не число, очищаем другие поля
            if not self.updating:
                self.updating = True
                self.rub_input.clear()
                self.eur_input.clear()
                self.updating = False

    def on_eur_changed(self, text):
        """Обработка изменения поля евро"""
        if self.updating or not text:
            return

        try:
            eur_value = float(text.replace(',', '.'))
            self.updating = True

            # Конвертация в RUB
            rub_value = eur_value * self.exchange_rates['EUR_RUB']
            self.rub_input.setText(f"{rub_value:.2f}")

            # Конвертация в USD
            usd_value = eur_value / self.exchange_rates['USD_EUR']
            self.usd_input.setText(f"{usd_value:.2f}")

            self.updating = False
        except ValueError:
            # Если введено не число, очищаем другие поля
            if not self.updating:
                self.updating = True
                self.rub_input.clear()
                self.usd_input.clear()
                self.updating = False

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Конвертер валют"))

        # Устанавливаем текст для меток
        self.rub_label.setText(_translate("MainWindow", "RUB ₽"))
        self.usd_label.setText(_translate("MainWindow", "USD $"))
        self.eur_label.setText(_translate("MainWindow", "EUR €"))

        # Устанавливаем текст для кнопки
        self.clear_button.setText(_translate("MainWindow", "Очистить все"))

        # Устанавливаем текст для информационной метки
        rates_text = (f"Курсы: 1$ = {self.exchange_rates['USD_RUB']}₽ | "
                      f"1€ = {self.exchange_rates['EUR_RUB']}₽ | "
                      f"1$ = {self.exchange_rates['USD_EUR']}€")
        self.rates_label.setText(_translate("MainWindow", rates_text))

        # Устанавливаем плейсхолдеры для полей ввода
        self.rub_input.setPlaceholderText(_translate("MainWindow", "Введите рубли"))
        self.usd_input.setPlaceholderText(_translate("MainWindow", "Введите доллары"))
        self.eur_input.setPlaceholderText(_translate("MainWindow", "Введите евро"))


if __name__ == "__main__":
    import sys

    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())